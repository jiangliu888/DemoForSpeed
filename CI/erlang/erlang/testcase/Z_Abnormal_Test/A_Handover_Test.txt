*** Settings ***
Suite Setup       handover_setup
Suite Teardown    handover_teardown
Resource          ../resource/UranusKeyword.txt
Resource          ../resource/SshKeyword.txt
Library           ../../libs/uranus/UranusKeyword.py
Library           ../../libs/relay/RelayControlCli.py
Resource          ../resource/SwitchKeyword.txt
Library           ../../libs/configCenter/ConsulKeyword.py

*** Variables ***
${exec_time}      100
${ping_num}       60
${check_num}      5
${Pop_Maintain_512_ping}    Pop_Maintain_512_ping.log
${handover_sideway_log}    handover_sideway.log
${pop_weight_change_ping}    pop_weight_change_ping.log

*** Test Cases ***
Handover_Link_Packet_Loss
    [Tags]    SDWANDEV-1199    abnormal
    [Setup]
    set_cpe_measure_algo    nanjing    100    500    100    100    0
    ...    0    0
    ${b_wan}=    ping_and_get_better_wan
    set Test variable    ${exec_time}    60
    ssh_pc    nanjing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{wuhan_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    run keyword if    ${b_wan}==1    Add_Loss_Between_Sip_Dip_On_TC    &{nanjing_switch}[ip]    &{local_pop}[ip2]    20%
    ...    ELSE    Add_Loss_Between_Sip_Dip_On_TC    &{remote_pop}[ip]    &{nanjing_switch}[ip2]    20%
    wait until keyword succeeds    30s    1s    check_score_bigger_than    &{wuhan_cpe}[chassis_id]    ${b_wan}    0.5
    set Test variable    ${exec_time}    50
    ${e_wan}=    ping_and_get_better_wan
    should not be equal    ${b_wan}    ${e_wan}
    ssh_pc    nanjing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    20
    close connection
    [Teardown]    run keywords    teardown_algo
    ...    AND    case_teardown

Handover_Link_Packet_Loss_Series
    [Tags]    SDWANDEV-1198    abnormal
    [Setup]
    set_cpe_measure_algo    local    100    500    100    100    0
    ...    0    0
    ${b_tunnel}=    ping_and_get_better_tunnel
    set Test variable    ${exec_time}    60
    ssh_pc    local
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{remote_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    ${remote_address}=    Get Tunnel Remote Address    ${b_tunnel}
    Add_Loss_Between_Sip_Dip_On_TC    &{local_pc}[cpe_ip]    ${remote_address}    50%
    ssh_pc    local
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    20
    close connection
    wait until keyword succeeds    30s    1s    check_tunnel_score_bigger_than    &{wuhan_cpe}[chassis_id]    ${b_tunnel}    0.5
    set Test variable    ${exec_time}    50
    ${e_tunnel}=    ping_and_get_better_tunnel
    should not be equal    ${b_tunnel}    ${e_tunnel}
    [Teardown]    run keywords    teardown_algo    local
    ...    AND    case_teardown

Handover_Link_Big_Delay
    [Tags]    abnormal    SDWANDEV-1044
    [Setup]
    ${b_wan}=    ping_and_get_better_wan
    set Test variable    ${exec_time}    60
    ssh_pc    nanjing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{wuhan_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    run keyword if    ${b_wan}==1    Add_Delay_Between_Sip_Dip_On_TC    &{nanjing_switch}[ip]    &{local_pop}[ip2]    20ms
    ...    ELSE    Add_Delay_Between_Sip_Dip_On_TC    &{remote_pop}[ip]    &{nanjing_switch}[ip2]    20ms
    ssh_pc    nanjing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    close connection
    set Test variable    ${exec_time}    50
    ${e_wan}=    ping_and_get_better_wan
    should not be equal    ${b_wan}    ${e_wan}
    [Teardown]    case_teardown

Handover_Link_Sdev
    [Tags]    SDWANDEV-1250    abnormal
    [Setup]
    ${b_wan}=    ping_and_get_better_wan
    set Test variable    ${exec_time}    60
    ssh_pc    nanjing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{wuhan_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    run keyword if    ${b_wan}==1    Add_Sdev_Between_Sip_Dip_On_TC    &{nanjing_switch}[ip]    &{local_pop}[ip2]    5ms
    ...    ELSE    Add_Sdev_Between_Sip_Dip_On_TC    &{remote_pop}[ip]    &{nanjing_switch}[ip2]    5ms
    ssh_pc    nanjing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    close connection
    set Test variable    ${exec_time}    50
    ${e_wan}=    ping_and_get_better_wan
    should not be equal    ${b_wan}    ${e_wan}
    [Teardown]    case_teardown

Pop_tunnel_weight_change_no_loss
    [Tags]    SDWANDEV-890    abnormal
    [Setup]
    ${tunnels_list}=    get_pop_to_pop_running_tunnels    &{local_pop}[ne_id]    &{remote_pop}[ne_id]
    ${tunnel}=    evaluate    sorted(${tunnels_list}, key=lambda k: k["quality"]['weight'])[0]["tunnelId"]
    ${tunnels}=    get_ne_tunnels_from_controller_with_dst_ne_id    &{local_pop}[ne_id]    &{remote_pop}[ne_id]
    ${t_d_ip}=    evaluate    filter(lambda x:x['tunnelId']==int(${tunnel}),${tunnels})[0]['dstIp']
    set Test variable    ${exec_time}    60
    ssh_pc    local
    Write    rm -rf ${pop_weight_change_ping}
    Write    ping -M do -s 512 &{remote_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${pop_weight_change_ping} 2>&1 &
    add delay on pop    remote    ${t_d_ip}
    wait until keyword succeeds    100s    2s    check_local_pop_lower_weight_tunnel_changed    ${tunnel}
    ssh_pc    local
    Get Valid Ping Logs_loss_less_than    ${pop_weight_change_ping}    0
    close connection
    [Teardown]    del delay on pop    remote    ${t_d_ip}

Handover_Link_Nat_CPE_Packet_Loss_100
    [Tags]    SDWANDEV-956    SDWANDEV-1048    debug    abnormal
    [Setup]
    set Test variable    ${exec_time}    50
    ${local_wan_ip}=    get_ip_from_cnf_by_id    &{local_cpe}[chassis_id]
    ssh_pc    chongqing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{local_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    Add_Loss_Between_Sip_Dip_On_TC    ${local_wan_ip}    &{chongqing_switch}[ip]    100%
    ssh_pc    chongqing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    3
    close connection
    Teardown_TC_config
    ssh_pc    chongqing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{local_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    shutdown_local_pop_port
    ssh_pc    chongqing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    3
    close connection
    [Teardown]    run keywords    Teardown_TC_config
    ...    AND    unshutdown_local_pop_port

Handover_Link_CPE_WAN_DOWN
    [Tags]    SDWANDEV-1252    abnormal    SDWANDEV-2648
    [Setup]
    ${b_wan}=    ping_and_get_better_wan
    set Test variable    ${exec_time}    60
    ssh_pc    nanjing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{wuhan_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    run keyword if    ${b_wan}==1    filter_nanjing_wan_traffic    shutdownWan1
    ...    ELSE    filter_nanjing_wan_traffic    shutdownWan2
    ssh_pc    nanjing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    [Teardown]    unshutdown_nanjing_pop_port

Quic_link_defferent_delay
    [Tags]    abnormal    SDWANDEV-2719
    [Setup]
    ${link_ids}    ${links}=    Check End2End Links    nanjing    &{guangzhou_cpe}[chassis_id]    8
    Add_Delay_Between_Sip_Dip_On_TC    &{nanjing_switch}[ip]    &{local_pop}[ip2]    2ms
    wait until keyword succeeds    63s    500ms    get_2_link_in_range    nanjing    ${link_ids}    ${0.5}
    ...    ${4.0}
    Iperf3_band_From_PC_With_Port_with_multi_session    &{nanjing_pc}[inner_ip]    guangzhou    5201    5    ${True}    2
    wait until keyword succeeds    6s    200ms    check_iperf_band_re_trans_in_pc    82    guangzhou    92
    ...    ${False}    ${60}
    [Teardown]    case_teardown

Handover_Link_CPE_WAN_DOWN_4G_back
    [Tags]    abnormal    SDWANDEV-1634
    [Setup]    4G_links_check
    4G_backup_link_no_packet_and_flow
    ssh_pc    guangzhou
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{nanjing_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    shutdown_guangzhou_wan2_port    ${False}
    wait until keyword succeeds    45s    200ms    gateway_cpe_wan_link_bad    guangzhou    4    2
    unshutdown_guangzhou_wan2_port    ${False}
    ssh_pc    guangzhou
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    wait until keyword succeeds    60s    200ms    gateway_cpe_wan_link_bad    guangzhou    2    2
    4G_backup_link_no_packet_and_flow
    [Teardown]    unshutdown_guangzhou_wan2_port_and_link_good    ${False}

Handover_Link_CPE_WAN_DOWN_4G
    [Tags]    SDWANDEV-1631    SDWANDEV-1657    abnormal
    [Setup]    4G_links_check
    Iperf3_loss_From_PC_With_Port    &{nanjing_pc}[inner_ip]    5M    guangzhou    5201    30    ${True}
    shutdown_guangzhou_wan1_port    ${False}
    run keyword and continue on failure    wait until keyword succeeds    50s    2s    check_iperf_loss_result_in_pc    24    guangzhou
    ${link_ids}    ${links}=    Check End2End Links    guangzhou    &{nanjing_cpe}[chassis_id]    8
    ${b_score_list}    ${b_p_list}    ${b_b_list}=    Get_CPE_Link_Packets_Bytes_Score    guangzhou    ${link_ids}
    ${wan1_links}    evaluate    filter(lambda x:x['local-wan-id']==1,${links})
    ${wan1_links_ids}    EVALUATE    map(lambda x: x['number'],${wan1_links})
    ${num}=    get_link_qos_num    guangzhou    ${wan1_links_ids}
    should be true    ${num}==4
    Comment    Wait All netconf and of avaiable
    [Teardown]    run keywords  unshutdown_guangzhou_wan1_port_and_link_good    ${False}
    ...    AND    Print Iperf Server Log    nanjing   /tmp/listen_5201.txt
    ...    AND    Print PC Large Log    guangzhou   ${10}   iperf.log

Handover_Link_CPE_WAN_Remote_DOWN_4G
    [Tags]    abnormal    SDWANDEV-1659
    [Setup]    4G_links_check
    Iperf3_loss_From_PC_With_Port    &{nanjing_pc}[inner_ip]    5M    guangzhou    5201    30    ${True}
    shutdown_guangzhou_wan1_port    ${True}
    run keyword and continue on failure    wait until keyword succeeds    33s    500ms    check_iperf_loss_result_in_pc    17    guangzhou
    ${link_ids}    ${links}=    Check End2End Links    guangzhou    &{nanjing_cpe}[chassis_id]    8
    ${b_score_list}    ${b_p_list}    ${b_b_list}=    Get_CPE_Link_Packets_Bytes_Score    guangzhou    ${link_ids}
    ${wan1_links}    evaluate    filter(lambda x:x['local-wan-id']==1,${links})
    ${wan1_links_ids}    EVALUATE    map(lambda x: x['number'],${wan1_links})
    ${num}=    get_link_qos_num    guangzhou    ${wan1_links_ids}
    should be true    ${num}==4
    [Teardown]    unshutdown_guangzhou_wan1_port_and_link_good    ${True}

Quic_Link_Packet_Loss_5%
    [Tags]    SDWANDEV-2649
    [Setup]
    Add_Loss_Between_Sip_Dip_On_TC    10.0.0.0/8    10.0.0.0/8    5%
    Iperf3_loss_From_PC_With_Parallel Sessions    &{nanjing_pc}[inner_ip]    3M    guangzhou    5201    512    5
    ...    5    ${True}
    wait until keyword succeeds    6s    1s    check_paralled_sessions_iperf_loss_result_in_pc    0.1    guangzhou
    Iperf3_loss_From_PC_With_Parallel Sessions    &{nanjing_pc}[inner_ip]    3M    guangzhou    5201    512    5
    ...    5
    wait until keyword succeeds    6s    1s    check_paralled_sessions_iperf_loss_result_in_pc    0.15    guangzhou
    [Teardown]    case_teardown

Quic_Link_Packet_jitter_14ms
    [Tags]    SDWANDEV-2649    debug
    [Setup]
    Add_Delay_Range_Between_Sip_Dip_On_TC    10.0.0.0/8    10.0.0.0/8    40ms    50ms    50%
    Iperf3_loss_From_PC_With_Parallel Sessions    &{nanjing_pc}[inner_ip]    3M    guangzhou    5201    512    5
    ...    5    ${True}
    ${jitter}=    wait until keyword succeeds    10    1s    check_paralled_sessions_iperf_loss_result_in_pc    0    guangzhou
    Iperf3_loss_From_PC_With_Parallel Sessions    &{nanjing_pc}[inner_ip]    3M    guangzhou    5201    512    5
    ...    5
    ${jitter}=    wait until keyword succeeds    10    1s    check_iperf_loss_result_in_pc    0    guangzhou
    [Teardown]    case_teardown

Handover_Link_Gateway_CPE_WAN_DOWN
    [Tags]    SDWANDEV-3642    SDWANDEV-3705    SDWANDEV-3703    alarm
    [Setup]
    set Test variable    ${exec_time}    60
    ssh_pc    changsha
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{nanjing_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    shutdown_changsha_wan1_port
    #check port down alarm
    wait until keyword succeeds    18x    10s    check_alarm_num    firing    0303    NetworkPortDown
    ...    Critical    changsha    1020    322    1
    ssh_pc    changsha
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    [Teardown]    unshutdown_changsha_wan1_port

*** Keywords ***
handover_setup
    ${p_i}=    create list    &{nanjing_cpe}[internet_if]    &{nanjing_cpe}[internet_if]
    ${p_a_wrong}=    create list    10.194.14.3    10.196.14.3
    patch_company_sites    ${suite_company_id}    ${suite_&{nanjing_pc}[site_name]_site_id}    &{nanjing_pc}[site_name]    &{nanjing_cpe}[chassis_id]    nets=&{nanjing_cpe}[nets]    public_if=${p_i}
    ...    public_addr=${p_a_wrong}   dynamicEnable=${True}
    ${link_ids}    ${links}=    wait until keyword succeeds    10s    1s    Check End2End Links    guangzhou
    ...    &{nanjing_cpe}[chassis_id]    8
    wait until keyword succeeds    35s    1s    get_4_link_bad    guangzhou    ${link_ids}
    ${link_ids}    ${links}=    Check End2End Links    wuhan    &{nanjing_cpe}[chassis_id]    8
    wait until keyword succeeds    10s    1s    get_4_link_bad    wuhan    ${link_ids}
    wait until keyword succeeds    5x    20ms    Ensure_CPE_Flow_Work    remote    office
    wait until keyword succeeds    10x    20ms    Ensure_CPE_Flow_Work    nanjing    office
    init_iperf_server

shutdown_local_pop_port
    ${c_l_id}=    shutdown_switch_port    m_240    &{mirror_switch_240}[local_pop_if2]
    set suite variable    ${s_c_l_id}    ${c_l_id}

unshutdown_local_pop_port
    unshutdown_switch_port    ${s_c_l_id}    &{mirror_switch_240}[local_pop_if2]

shutdown_remote_pop_port
    ${c_r_id}=    shutdown_switch_port    m_241    &{mirror_switch_241}[remote_pop_if1]
    set suite variable    ${s_c_r_id}    ${c_r_id}

unshutdown_remote_pop_port
    unshutdown_switch_port    ${s_c_r_id}    &{mirror_switch_241}[remote_pop_if1]

case_teardown
    Teardown_TC_config
    wait until keyword succeeds    130s    1s    check_score_less_than    &{wuhan_cpe}[chassis_id]    2.2
    wait until keyword succeeds    130s    1s    check_score_less_than    &{guangzhou_cpe}[chassis_id]    100

check_score_less_than
    [Arguments]    ${ne_id}    ${expect_s}
    ${link_ids}    Get End2End undirect Links    nanjing    ${ne_id}
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${link_ids}
    : FOR    ${score}    IN    @{score_list}
    \    should be true    ${score} < ${expect_s}

ping_and_get_better_wan
    ${link_ids}    ${links}=    Check End2End Links    nanjing    &{wuhan_cpe}[chassis_id]    8
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${link_ids}
    ssh_pc    nanjing
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{wuhan_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    ssh_pc    nanjing
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    close connection
    ${e_score_list}    ${e_p_list}    ${e_b_list}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${link_ids}
    ${b_wan}    ${b_direct}=    Get_Better_Wan    ${links}    ${p_list}    ${e_p_list}
    [Return]    ${b_wan}

ping_and_get_better_tunnel
    ${link_ids}    ${links}=    Check End2End Links    local    &{remote_cpe}[chassis_id]    2
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    local    ${link_ids}
    ssh_pc    local
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{local_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    ssh_pc    local
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    close connection
    ${e_score_list}    ${e_p_list}    ${e_b_list}=    Get_CPE_Link_Packets_Bytes_Score    local    ${link_ids}
    ${b_tunnel}    ${b_direct}=    Get_Better_Tunnel    ${links}    ${p_list}    ${e_p_list}
    [Return]    ${b_tunnel}

Get Tunnel Remote Address
    [Arguments]    ${tunnel_id}
    ${tunnels}=    get_device_tunnel_netcnf    &{local_cpe}[ip]    &{local_cpe}[ssh_port]    &{local_cpe}[user]    &{local_cpe}[passwd]
    ${ip}=    set variable    ""
    : FOR    ${t}    IN    @{tunnels}
    \    ${ip}    set variable if    ${t['id']} == ${tunnel_id}    ${t['remote-ipv4-address']}
    \    exit for loop if    ${t['id']} == ${tunnel_id}
    [Return]    ${ip}

check_local_pop_lower_weight_tunnel_changed
    [Arguments]    ${pre_tunnel_id}
    ${tunnels_list}=    get_pop_to_pop_running_tunnels    &{local_pop}[ne_id]    &{remote_pop}[ne_id]
    ${tunnel}=    evaluate    sorted(${tunnels_list}, key=lambda k: k["quality"]['weight'])[0]["tunnelId"]
    should be true    ${tunnel} != ${pre_tunnel_id}

filter_nanjing_wan_traffic
    [Arguments]    ${acl_name}
    ${c_l_id}=    traffic_filter_switch_port    nanjing_switch    &{nanjing_switch}[nanjing_wan_if]    ${acl_name}
    set suite variable    ${s_c_l_id}    ${c_l_id}

unshutdown_nanjing_pop_port
    undo_traffic_filter_switch_port    ${s_c_l_id}    &{nanjing_switch}[nanjing_wan_if]
    wait until keyword succeeds    130s    1s    check_score_less_than    &{wuhan_cpe}[chassis_id]    2.2
    wait until keyword succeeds    130s    1s    check_score_less_than    &{guangzhou_cpe}[chassis_id]    85
    wait until keyword succeeds    2x    1s    Wait All netconf and of avaiable

handover_teardown
    ${p_i}=    create list    &{nanjing_cpe}[internet_if]    &{nanjing_cpe}[internet_if]
    ${p_a}=    create list    &{nanjing_switch}[ip]    &{nanjing_switch}[ip2]
    patch_company_sites    ${suite_company_id}    ${suite_&{nanjing_pc}[site_name]_site_id}    &{nanjing_pc}[site_name]    &{nanjing_cpe}[chassis_id]    nets=&{nanjing_cpe}[nets]    public_if=${p_i}
    ...    public_addr=${p_a}   dynamicEnable=${True}
    stop_iperf_server

get_2_link_in_range
    [Arguments]    ${cpe}    ${link_ids}    ${score_l}    ${score_h}
    ${num}=    get_score_less_in_range_num    ${cpe}    ${link_ids}    ${score_l}    ${score_h}
    should be true    ${num} ==2
    [Return]    ${num}

init_iperf_server
    ${office_server_connect}    Init_Iperfs_Server_In_PC_with_Port    nanjing    5201
    ${server_list}=    create list    ${office_server_connect}
    set suite variable    ${iperf_server_list}    ${server_list}

stop_iperf_server
    : FOR    ${server_connect}    IN    @{iperf_server_list}
    \    Close_Iperfs_Server_In_LocalPC    ${server_connect}
    close connection

shutdown_guangzhou_wan1_port
    [Arguments]    ${remote}
    ${c_l_id}=    shutdown_switch_port    m_243    &{mirror_switch_243}[guangzhou_cpe_if]
    set suite variable    ${s_c_l_id}    ${c_l_id}

unshutdown_guangzhou_wan1_port
    [Arguments]    ${remote}
    unshutdown_switch_port    ${s_c_l_id}    &{mirror_switch_243}[guangzhou_cpe_if]
    Wait All netconf and of avaiable

unshutdown_guangzhou_wan1_port_and_link_good
    [Arguments]    ${remote}
    unshutdown_guangzhou_wan1_port    ${remote}
    wait until keyword succeeds    61s    1s    gateway_cpe_wan_link_bad    guangzhou    2

4G_links_check
    ${link_ids}    ${links}=    Check End2End Links    guangzhou    &{nanjing_cpe}[chassis_id]    8
    ${direct_links}    evaluate    filter(lambda x:x['direct']==True,${links})
    ${direct_links_ids}    EVALUATE    map(lambda x: x['number'],${direct_links})
    ${num}=    get_link_qos_num    guangzhou    ${direct_links_ids}
    should be true    ${num}==4
    ${link_ids}    ${links}=    Check End2End Links    nanjing    &{guangzhou_cpe}[chassis_id]    8
    ${direct_links}    evaluate    filter(lambda x:x['direct']==True,${links})
    ${direct_links_ids}    EVALUATE    map(lambda x: x['number'],${direct_links})
    ${num}=    get_link_qos_num    nanjing    ${direct_links_ids}
    should be true    ${num}==4

shutdown_guangzhou_wan2_port
    [Arguments]    ${remote}
    ${c_l_id}=    shutdown_switch_port    m_240    &{mirror_switch_240}[guangzhou_cpe_if2]
    set suite variable    ${s_c_l_id2}    ${c_l_id}

unshutdown_guangzhou_wan2_port
    [Arguments]    ${remote}
    unshutdown_switch_port    ${s_c_l_id2}    &{mirror_switch_240}[guangzhou_cpe_if2]
    Wait All netconf and of avaiable

4G_backup_link_no_packet_and_flow
    ${link_ids}    ${links}=    Check End2End Links    guangzhou    &{nanjing_cpe}[chassis_id]    8
    ${link_ids_r}    ${links_r}=    Check End2End Links    nanjing    &{guangzhou_cpe}[chassis_id]    8
    ${wan2_links}    evaluate    filter(lambda x:x['local-wan-id']==2,${links})
    ${wan2_links_ids}    EVALUATE    map(lambda x: x['number'],${wan2_links})
    ${wan2_links_r}    evaluate    filter(lambda x:x['remote-wan-id']==2,${links_r})
    ${wan2_links_ids_r}    EVALUATE    map(lambda x: x['number'],${wan2_links_r})
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    guangzhou    ${wan2_links_ids}
    ${score_list_r}    ${p_list_r}    ${b_list_r}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${wan2_links_ids_r}
    ssh_pc    guangzhou
    Write    rm -rf ${handover_sideway_log}
    Write    ping -M do -s 512 &{nanjing_pc}[inner_ip] -c ${exec_time} -i 0.2 > ${handover_sideway_log} 2>&1 &
    ssh_pc    guangzhou
    Get Valid Ping Logs_loss_less_than    ${handover_sideway_log}    0
    close connection
    ${e_score_list}    ${e_p_list}    ${e_b_list}=    Get_CPE_Link_Packets_Bytes_Score    guangzhou    ${wan2_links_ids}
    ${e_score_list_r}    ${e_p_list_r}    ${e_b_list_r}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${wan2_links_ids_r}
    : FOR    ${packet}    IN    @{e_p_list}
    \    ${i}=    get index from list    ${e_p_list}    ${packet}
    \    ${pkg}=    evaluate    ${e_p_list[${i}]}-${p_list[${i}]}
    \    ${pkg_r}=    evaluate    ${e_p_list_r[${i}]}-${p_list_r[${i}]}
    \    should be equal as integers    ${pkg}    0
    \    should be equal as integers    ${pkg_r}    0

unshutdown_guangzhou_wan2_port_and_link_good
    [Arguments]    ${remote}
    run keyword and ignore error    unshutdown_guangzhou_wan2_port    ${remote}
    wait until keyword succeeds    61s    1s    gateway_cpe_wan_link_bad    guangzhou    2    2

get_4_link_bad
    [Arguments]    ${cpe}    ${link_ids}
    ${num}=    get_link_qos_num    ${cpe}    ${link_ids}
    should be true    ${num}==4
    [Return]    ${num}

get_score_less_in_range_num
    [Arguments]    ${cpe}    ${link_ids}    ${expect_s_l}    ${expect_s_h}
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    ${cpe}    ${link_ids}
    ${num}=    evaluate    len(filter(lambda x:${expect_s_l}<float(x) and float(x) < ${expect_s_h},${score_list}))
    [Return]    ${num}

teardown_algo
    [Arguments]    ${cpe}=nanjing
    set_cpe_measure_algo    ${cpe}    100    100    100    70    20
    ...    10    5

check_score_bigger_than
    [Arguments]    ${ne_id}    ${wan_id}    ${expect_s}
    ${link_ids}    Get End2End undirect Links With WanId    nanjing    ${ne_id}    ${wan_id}
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    nanjing    ${link_ids}
    : FOR    ${score}    IN    @{score_list}
    \    should be true    ${score} > ${expect_s}

check_tunnel_score_bigger_than
    [Arguments]    ${ne_id}    ${tunnel_id}    ${expect_s}
    ${link_ids}    Get End2End Links With tunnel    local    ${ne_id}    ${tunnel_id}
    ${score_list}    ${p_list}    ${b_list}=    Get_CPE_Link_Packets_Bytes_Score    local    ${link_ids}
    : FOR    ${score}    IN    @{score_list}
    \    should be true    ${score} > ${expect_s}
